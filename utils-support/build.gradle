apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka-android'

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode version_code
        versionName version_name

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:support-annotations:$support_version"
    // don't upgrade compileSdkVersion because google did not release source
    // code of 27 in SDK yet
    //noinspection GradleCompatible
    implementation "com.android.support:support-fragment:$support_version"
}

repositories {
    mavenCentral()
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}


apply plugin: 'com.jfrog.bintray'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'maven-publish'

group = project_group
version = version_name
project.archivesBaseName = "utils-support"

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "haruue"
            name "Haruue Icymoon"
            email "i@haruue.moe"
        }
    }
}

publishing {
    publications {
        mavenKotlin(MavenPublication) {
            artifactId project.archivesBaseName
            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', project_description)
                root.children().last() + pomConfig

                def dependenciesNode = root.appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    if (it.group && it.name && it.version) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

afterEvaluate {
    publishing.publications.mavenKotlin.artifact(bundleRelease)
}

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    publications = ['mavenKotlin']
    publish = true

    pkg {
        repo = 'maven'
        name = project_name + 'Support'
        desc = project_description
        websiteUrl = project_website
        issueTrackerUrl = project_website + '/issues'
        vcsUrl = project_website + '.git'
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
    }
}

bintrayUpload.dependsOn sourcesJar
bintrayUpload.dependsOn javadocJar
tasks.whenTaskAdded {
    if (it.name == 'assembleRelease' || it.name == 'generatePomFileForMavenKotlinPublication') {
        bintrayUpload.dependsOn it
    }
}
